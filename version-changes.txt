v1.1.1-alpha
  # Fixes
    -> Updated 'If', 'For' and 'While' from 'Expressions' to 'Statements'
    -> Fixed 'For Loop' variabile declaration: declaring a 'Counter' variabile ( e.g. for(let i = 0; ...) ) inside the parenthesis now doesn't throw an error
    -> Fixed 'Args List' Parsing: parsing compound assignment operations is now available
  # Features
    -> Single Line 'If', 'For' and 'While' Statements are now implemented

v1.2.0-alpha
  # Features
    -> Lists
      -> Added List Declaration: list = [value, ...]
      -> Added List Print: print(list), print(list[idx])
      -> Added List Return Value: list[idx]
      -> Added List Value Assignment: list[idx] = value
      -> Added List Concatenation: list_c = list_a + list_b
      -> Added List Functions
        -> push(list, value)
        -> pop(list)
        -> shift(list)
        -> unshift(list, value)
        -> slice(list, start, end?)
        -> contains(list, value)
        -> reverse(list, value)
        -> filter(list, function)
        -> map(list, function)
        -> sort(list, inverted?)

    -> Negative Numbers: -10, -1.5
    
    -> Added 'length' Built-In Function: length(10), length("string"), length([1, true, "three"]), (string, number, object, list)

    -> Function can now be 'Anonymous': fn(x) {body}
    -> Variable Assignment, Variable Declaration and Function Call can now support 'Statements': let a = fn(args) { body }; function(fn(args) {body});
  
    -> 'foreach' statement
    -> Identifier Computed Object Access: obj[ident] // ident of type "string"
    
v1.2.1-alpha
  # Changes
    -> For statement compound assignment can now be a numeric expression or a numeric variabile which will increase the cycle variabile by its value: for(let i =0 ; i < 5; 1) // 1 is the same as i += 1, for(let i = 0; i < 5; a) // a is the same as i += a
    -> Assignment expression now support 'assignee' (Expression) instead of 'name' (string) 
  # Features
    -> Better error implementation: ParserError, InterpreterError, line and column indication.
    -> Added compound increment operator: i++, i--
    
v1.2.2-alpha
  # Fixes
    -> Lexer MAJOR error fixed: the lexer wasn't skipping "skippable" characters, such as " " (Space), "\t" (Tab), ecc, properly 


v1.2.3-alpha
  # Fixes
    -> Fixed foreach and while statements: now foreach and while statements skip new line tokens properly.
    -> Fixed for statement: now for statement variable declaration works properly.
  # Features
    -> Added input built-in function: input(text) // input supports numbers, booleans ans strings 

v2.0.0
  # Features
    -> Added logical operations: a == b || 2 == 3 || 3 == 2


v2.0.1
  # Changes
    -> Single line comment now uses '#' instead of '//'
  # Features
    -> Added integer division: 8 // 3 # 2

== ^^ RELEASED ^^ ==

v2.1.0
  # Features
    -> Built-In, Default and User-Made libraries: // Built-In libraries are already implemented in the code, Default's have to be imported
        -> List: push(list, value) // Built-In
          -> pop(list)
          -> shift(list)
          -> unshift(list, value)
          -> slice(list, start, end?)
          -> contains(list, value)
          -> reverse(list, value)
          -> filter(list, function)
          -> map(list, function)
          -> sort(list, inverted?)
        -> Math: // Default
          -> sqrt(num)
          -> pow(base, exponent)
          -> rand(min, max, decimals), 
          -> PI
        -> Math: // Default
          -> sqrt(num)
          -> pow(base, exponent)
          -> rand(min, max, decimals), 
          -> PI
    
    -> Library Builder
    -> npm 'gh3-lib' Library
    
    -> Math Errors handling
  
  # Changes
    -> List functions now uses the new Default Library methods: List.pop(list_var), List.push(list_var, value)
  # Fixes
    -> Fixed exponential expression: now elevating a number to a power works properly
    -> Fixed multiple new lines error: now inserting multiple empty lines doesn't throw an error 
    -> Fixed function body declaration: now function body handles new lines correctly

v2.2.0
  # Features
    -> Gh3sp IDE !!!

    -> String Library:
      -> join(string_1, string_2, ..., string_n)
      -> upper(value: string)
      -> lower(value: string)
    -> JSON Library:
      -> parse(value: string): object
      -> stringify(value: object): string
    -> GMath Library:
      -> convert(value: string, starting_base: number, arrive_base: number)
    
    -> Ternary Expression: cond ? val_true : val_false
    -> Nullish Coalescent Expression: value ?? value_if_null
    -> Nullish Coalescent Compound Assignment: value ??= assign_value_if_null
  # Changes
    -> Single line expressions (if, for, foreach, while, function) now require an Arrow Function before the expression: if(a == b) => print("a equals b")
    -> Variable names now support "_" symbol
    -> Object keys now can be of 'string' type
    -> Object keys which are not defined, now return 'null' instead of throwing an error
  # Fixes:
    -> Fixed comparison operations between lists: Now comparing lists (==, !=) works as expected

v2.2.1
  # Changes
    -> Parser now doesn't automatically start evaluating the program through the interpreter, but instead it returns it to the main file, which run the interpreter's evaluation itself. This way the gh3sp-extension can parse the code and not run it immediately
    -> Complete code revision & correction
  # Fixes
    -> Variable names can now contains digit characters [0-9] but not at the start of the name (e.g. var_1 --> yes, 1_var --> no)
    -> Obj access with obj[value] or obj.value, with value as a non-existing key inside the object, now sets a new key inside the object: let obj = {"a": 2}    obj["b"] ??= 5 --> {"a": 2, "undefined": 5}
    -> Obj & List access/assignment/compound assignment now work properly
    -> Binary operations between negative numbers and variables now work properly

vx.x.x
  # Features
  
  # TO-DO: